

\section{Bluetoothkommunikation, Messung und Persistierung} 

Um Messdaten zu erhalten, kommuniziert ApoCo mit den Messsensoren \"uber Bluetooth.
Die eingesetzten Sensoren der Firma BodyTel verwenden f\"ur die \"Ubermittlung der Messdaten 
ein Protokoll, das dem \emph{PDU-Modus} einer SMS entspricht.
PDU steht f\"ur \emph{Protocol Data Unit} und ist eine von drei Spezifikationen, 
welche vom \emph{Europ\"aischen Institut f\"ur Telekommunikationsnormen} (ETSI)\cite{ETSI:01}
zum Standard f\"ur SMS-Nachrichten erkl\"art wurde.
In diesem Protokoll werden AT-Kommandos f\"ur den Verbindungsaufbau eingesetzt 
und anschlie\ss{}end die Messwerte im PDU-Modus \"ubermittelt. 
AT-Kommandos sind ein Befehlssatz, der zum Parametrieren und Konfigurieren von Modems genutzt wird\cite{AT-command:01}.
Mit einem AT-Kommando teilt der Messsensor der Software mit, wenn er im n\"achsten Schritt eine Nachricht \"ubermitteln m\"ochte.
Da jeder Messsensor nur f\"ur eine bestimmte Art von Messung geeignet ist, underscheiden sich die PDUs der einzelnen Ger\"ate.
Nach dem ein Sensor \"uber Bluetooth mit dem Smartphone gekoppelt ist und verwendet werden soll, muss ApoCo 
als Bluetooth-Server auf ankommende Nachrichten h\"oren.\\
Im Gegensatz zu der Bluetoothkommunikation der BodyTel-Ger\"ate wird bei der Verbindung mit der Laborwaage f\"ur das Abwiegen
von Lebensmitteln kein Kommunikationsprotokoll verwendet.
Die Waage kommuniziert \"uber eine RS-232-Schnittstelle direkt ohne die Nachricht zu kodieren.
An dieser Schnittstelle sitzt ein Bluetooth-Dongle und ersetzt ein serielles Kabel.
ApoCo baut eine BluetoothSocket-Verbindung zu der Bluetooth-Dongle Adresse auf.
Die Waage sendet die Messwerte im 8-Bit ASCII-Code. 
Was beim Wiegen an Daten gesendet wird, kann an der Waage parametriert werden.
F\"ur die Kommunikation mit ApoCo wird das gemessene Nettogewicht \"ubertragen.
Direkt nachdem eine Socketverbindung zwischen ApoCo und der Waage aufgebaut ist, 
k\"onnen Daten von der Waage im ASCII-Code empfangen werden.


\subsection{Bluetoothkommunikation BodyTel}

In der Abbildung 4.5 wird am Beispiel der K\"orpergewichtsmessung demonstriert,
wie ein Verbindungsaufbau und Datenaustausch zwischen ApoCo und der K\"orperwaage zustande kommt.
Nach dem Start initialisiert die Activity \emph{ActivityBodyweight} den \emph{BluetoothManager und erzeugt ein Objekt vom Typ W\emph{WeightTelCreator}.
Anschliessend wird die Methode \emph{listenForInquiryConnections()} des BluetoothManager gerufen.
Dabei \"ubergibt die Activity der Methode ein Objekt vom Typ \emph{Handler} und WeightTelCreator.
Der Handler ist zust\"andig f\"ur Intraprozesskommunikation zwischen der Activity und einem Thread.
Kommt eine Nachricht \"uber den BluetoothSocket rein so kann diese nicht direkt an die Activity gegeben werden.
Das kann der Thread nur \"uber den Handler tun.
Der WeightTelCreator erzeugt den Thread und gibt eine Referenz auf ihn zur\"uck.
Die Referenz ist ein Interface vom Typ \emph{AccessableIF}.
\"Uber dieses Interface kann die Activity Nachrichten an den Thread senden.
Daf\"ur gibt es die Folgenden Methoden:

\begin{itemize}
 \item writeTo():\\
 \"Uber diese Methode k\"onnen Nachrichten an den Thread gesendet werden,
 welche dann \"uber den BluetoothSocket an den Messsensor weiter gesendet werden.
 \item preformStart():\\
 Mit dieser Methode wird der Thread von der Activity gestartet
 \item cancel();\\
 Mit dieser Methode fordert die Activity den Thread auf sich zu beenden.
\end{itemize}


\begin{figure}[h]
  \centering
  \includegraphics[scale=0.5]{diagramme/kapitel4/sequenzdiagramme/bt_com_aufbau_datasend.png}
  \caption{Sequenzdiagramm f\"ur Bluetoothverbindung und Datenaustausch}
  
\end{figure}

\subsection{Dekodieren einer Messung}

Das dekodieren einer Messung wir am Beispiel der K\"orpergewichtsmessung erkl\"ahrt.
Um eine Messung zu bekommen muss zu erst das Protokoll der BodyTel-Ger\"ate erf\"ullt werden.
Der Ablauf dabei sieht Folgendermassen aus:
\begin{itemize}
 \item Sensor sendet: ATE0\\
 Das ist eine Echo und pr\"ufft ob jemand antwortet.
 \item ApoCo sendet: \textbackslash n \textbackslash r OK \textbackslash n \textbackslash r\\
 Antwort auf das Echo.
 \item Sensor sendet: AT+CMGS=142\\
 Das Kommando vor dem Gleicheitszeichen bedeutet es wird eine Nachricht gesendet und die Zahl dannach ist die L\"ange der Nachricht.
 \item Sensor sendet: Nachricht als Hexadezimal Zahlen.
 \item ApoCo sendet: \textbackslash r \textbackslash n +CMGS\\
 Best\"atigung der Nachricht.
\end{itemize}
Ende der Kommunikation.\\

Ab jetzt muss die Nachricht dekodiert werden. 
Daf\"ur veranschaulicht die Abbildung 4.6 in einem Klassendiagramm, welche Klassen f\"ur diesen Vorgang notwendig sind.

\begin{figure}[h]
  \centering
  \includegraphics[scale=0.78]{diagramme/kapitel4/uml/weighttel_messagedecode.png}
  \caption{UML-Diagram f\"ur dekodieren von Nachrichten}
  
\end{figure}

Zum einlesen der ankommenden Nachricht benutzt die Klasse ActivityBodyweight ein Objekt der Klasse \emph{WeightTelMessageReader}.
Die Klasse \emph{WeightTelMessageReader} analysiert  die Nachricht und setzt die einzelnen ankommenden Bytes in einem St\"uck zusammen.
W\"arend der Analyse ordnet die Klasse \emph{WeightTelMessageReader} die richtigen Antwort-Strings zu, die an den Sensor zur\"uckgegeben werden.
F\"ur dise Analyse stehen in der Klasse \emph{WeightTelMessageProtocol} die entsprechenden Konstanten bereit.
Wurde die Nachricht zum Ende gelesen, wird die SMS alz String an die Klasse \emph{WeightTelMeasurementDecoder} weiter gereicht.
Hier wird die Methode \emph{decodeMeasurement()} aufgerufen.
Die Klasse \emph{WeightTelMeasurementDecoder}erzeugt ein Objekt von Typ \emph{WeightTelSMS} und initialisiert es mit dem SMS-String.
Im Konstruktor der Klasse \emph{WeightTelSMS} wird der SMS-String an entsprechenden Stellen getrennt und in lesbare Werte umgewandelt.
Nach diesem Vorgang erzeugt die Klasse \emph{WeightTelMeasurementDecoder} ein Objekt von Typ \emph{BodyweightResult} und initialisiert es
mit den Messergebnissen aus dem \emph{WeightTelSMS} Objekt.
Das Result-Objekt wird anschliessen an die Activity durchgereicht.
Dieser Vorgang wird durch das Sequenzdiagramm in der Abbildung 4.7 verdeutlicht.\\

\begin{figure}[h]
  \centering
  \includegraphics[scale=0.45]{diagramme/kapitel4/sequenzdiagramme/weighttel_messagedecode.png}
  \caption{Sequenzdiagram f\"ur dekodieren von Nachrichten}
  
\end{figure}

\subsection{Anzeigen und Speichern der Messwerte}

Nach einer Messung erscheint der neue Messwert, ganz oben in einer \emph{ListView} der Activity und wird anschliessen in der Datenbank gespeichert.
Das funktioniert volgendermassen.
Wenn das Result-Objekt nach dem dekodieren der SMS an die Activity durchgegeben wurde, erzeugt der Handler der Activity ein DTO-Objekt.
Im Fall der K\"orpergewichtsmessung ist das ein Objekt der Klasse \emph{BodyweightDTO}.
Dieses Objekt wird mit dem Result-Objekt initialisiert.
Nun wird aus dem DTO-Objekt mit Hilfe der \emph{static} Methode \emph{\texttt{convertDTO\_to\_MODEL()}} der Klasse \emph{BodyweightModel}, ein Objekt
der Klasse \emph{BodyweightModel}  erzeugt und an ein ArrayAdapter, zum anzeigen in der ListView, \"ubergeben.
Das DTO-Objekt wird durch durch die Klasse DBManagerLocal in der Datenbank gespeichert.
Dieser Vorgang soll durch die Diagramme in den Abbildungen 4.8 und 4.9 nochmals verdeutlicht werden.


\begin{figure}[h]
  \centering
  \includegraphics[scale=0.8]{diagramme/kapitel4/uml/show_results_in_lv.png}
  \caption{Klassendiagramm, Visualisierung und Speicherung der Daten}
  
\end{figure}

\begin{figure}[h]
  \centering
  \includegraphics[scale=0.5]{diagramme/kapitel4/sequenzdiagramme/vl_db.png}
  \caption{Sequenzdiagramm, Visualisierung und Speicherung der Daten}
  
\end{figure}